version: 2.1

# ==============================================================================
# Orbs - Reusable Configuration Packages
# Using the official CircleCI Rust orb to simplify CI/CD configuration.
# Documentation: https://circleci.com/developer/orbs/orb/circleci/rust
# ==============================================================================
orbs:
  rust: circleci/rust@1.8.0

# ==============================================================================
# Job Definitions
# Each job represents a collection of steps to be executed in a specific environment.
# ==============================================================================
jobs:
  # ------------------------------------------------------------------------------
  # Job: Fast Quality Checks
  # Combines format checking and linting in a single job to reduce container spin-up overhead.
  # This optimization reduces the number of containers from 2 to 1, saving ~15-20 seconds.
  # ------------------------------------------------------------------------------
  fast_checks:
    executor:
      name: rust/default
      tag: '1.85'
    steps:
      - checkout
      # Restore cached dependencies to speed up the process
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Cargo.toml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Check code format
          command: cargo fmt -- --check
      - run:
          name: Run clippy
          command: cargo clippy --all-targets --all-features -- -D warnings
      # Save cache for future runs
      - save_cache:
          key: v1-dependencies-{{ checksum "Cargo.toml" }}
          paths:
            - "~/.cargo/registry"
            - "~/.cargo/git"
            - "target"

  # ------------------------------------------------------------------------------
  # Job: Build and Test
  # Combines building and testing in a single job to reduce container overhead.
  # This optimization saves ~15-20 seconds by eliminating one container spin-up.
  # ------------------------------------------------------------------------------
  build_and_test:
    executor:
      name: rust/default
      tag: '1.85'
    resource_class: medium+
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Cargo.toml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Build project (debug)
          command: cargo build --verbose
      - run:
          name: Run tests
          command: cargo test --verbose
      - run:
          name: Build project (release)
          command: cargo build --release --verbose
      - save_cache:
          key: v1-dependencies-{{ checksum "Cargo.toml" }}
          paths:
            - "~/.cargo/registry"
            - "~/.cargo/git"
            - "target"
      # Persist the `target` directory to the workspace for downstream jobs
      - persist_to_workspace:
          root: .
          paths:
            - target

  # ------------------------------------------------------------------------------
  # Job: Generate Code Coverage
  # Generates a code coverage report using `cargo-llvm-cov` and uploads it to Coveralls.
  # ------------------------------------------------------------------------------
  coverage:
    executor:
      name: rust/default
      tag: '1.85'
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Cargo.toml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      # Restore cache for cargo-binstall
      - restore_cache:
          keys:
            - v1-cargo-binstall-{{ arch }}-v1.10.15
            - v1-cargo-binstall-{{ arch }}-
      # Restore cache for cargo-installed binaries
      - restore_cache:
          keys:
            - v1-cargo-binaries-llvm-cov-0.6.21-{{ arch }}
            - v1-cargo-binaries-llvm-cov-
      # Attach the workspace to access build artifacts from the `build` job
      - attach_workspace:
          at: .
      - run:
          name: Install cargo-binstall
          command: |
            # Install cargo-binstall if not already cached
            if ! command -v cargo-binstall &> /dev/null; then
              echo "📥 Installing cargo-binstall..."
              curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash
            else
              echo "✅ cargo-binstall already installed (cached)"
            fi
      - run:
          name: Install cargo-llvm-cov
          command: |
            # Use cargo-binstall for faster installation (downloads precompiled binaries)
            if ! command -v cargo-llvm-cov &> /dev/null; then
              echo "📥 Installing cargo-llvm-cov via cargo-binstall..."
              cargo binstall cargo-llvm-cov --version 0.6.21 --no-confirm --log-level info
            else
              echo "✅ cargo-llvm-cov already installed (cached)"
            fi
            rustup component add llvm-tools-preview
      - save_cache:
          key: v1-cargo-binstall-{{ arch }}-v1.10.15
          paths:
            - "~/.cargo/bin/cargo-binstall"
      - run:
          name: Generate coverage report
          command: |
            # Auto-detect package name from Cargo.toml to keep the command generic
            PACKAGE_NAME=$(grep "^name = " Cargo.toml | head -n 1 | sed 's/name = "\(.*\)"/\1/')
            echo "📦 Detected package: $PACKAGE_NAME"
            # Generate LCOV report for Coveralls
            cargo llvm-cov --package "$PACKAGE_NAME" \
              --lcov --output-path coverage.lcov \
              --ignore-filename-regex "(\.cargo/registry|\.rustup/)"
            # Generate a text report for console output
            cargo llvm-cov --package "$PACKAGE_NAME" \
              --ignore-filename-regex "(\.cargo/registry|\.rustup/)" \
              | tee coverage.txt
      - run:
          name: Display coverage summary
          command: |
            echo "================================"
            echo "Code Coverage Summary"
            echo "================================"
            cat coverage.txt
      - run:
          name: Upload coverage to Coveralls
          command: |
            # Only upload if the COVERALLS_REPO_TOKEN is set
            if [ -n "$COVERALLS_REPO_TOKEN" ]; then
              echo "📤 Uploading coverage report to Coveralls..."
              curl -sL https://coveralls.io/coveralls-linux.tar.gz | tar -xz
              # Coveralls CLI automatically detects CircleCI environment
              ./coveralls report coverage.lcov --repo-token="$COVERALLS_REPO_TOKEN"
              echo "✅ Coverage report uploaded to Coveralls"
            else
              echo "⚠️  COVERALLS_REPO_TOKEN not set, skipping upload"
            fi
      - save_cache:
          key: v1-dependencies-{{ checksum "Cargo.toml" }}
          paths:
            - "~/.cargo/registry"
            - "~/.cargo/git"
            - "target"
      # Save cache for cargo-llvm-cov binaries
      - save_cache:
          key: v1-cargo-binaries-llvm-cov-0.6.21-{{ arch }}
          paths:
            - "~/.cargo/bin/cargo-llvm-cov"
            - "~/.cargo/bin/llvm-cov"
            - "~/.cargo/bin/llvm-profdata"
      # Store coverage reports as artifacts
      - store_artifacts:
          path: coverage.lcov
      - store_artifacts:
          path: coverage.txt

  # ------------------------------------------------------------------------------
  # Job: Build Documentation
  # Generates API documentation using `rustdoc`.
  # ------------------------------------------------------------------------------
  doc:
    executor:
      name: rust/default
      tag: '1.85'
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Cargo.toml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Generate documentation
          command: cargo doc --no-deps --verbose
      # Store the generated documentation as an artifact
      - store_artifacts:
          path: target/doc
          destination: doc

  # ------------------------------------------------------------------------------
  # Job: Security Audit
  # Checks for security vulnerabilities in dependencies using `cargo-audit`.
  # ------------------------------------------------------------------------------
  security_audit:
    executor:
      name: rust/default
      tag: '1.85'
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Cargo.toml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      # Restore cache for cargo-binstall
      - restore_cache:
          keys:
            - v1-cargo-binstall-{{ arch }}-v1.10.15
            - v1-cargo-binstall-{{ arch }}-
      # Restore cache for cargo-audit binary
      - restore_cache:
          keys:
            - v1-cargo-binaries-audit-{{ arch }}-latest
            - v1-cargo-binaries-audit-{{ arch }}-
      - run:
          name: Install cargo-binstall
          command: |
            # Install cargo-binstall if not already cached
            if ! command -v cargo-binstall &> /dev/null; then
              echo "📥 Installing cargo-binstall..."
              curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash
            else
              echo "✅ cargo-binstall already installed (cached)"
            fi
      - run:
          name: Install cargo-audit
          command: |
            # Use cargo-binstall for faster installation (downloads precompiled binaries)
            if ! command -v cargo-audit &> /dev/null; then
              echo "📥 Installing cargo-audit via cargo-binstall..."
              cargo binstall cargo-audit --no-confirm --log-level info
            else
              echo "✅ cargo-audit already installed (cached)"
            fi
      - save_cache:
          key: v1-dependencies-{{ checksum "Cargo.toml" }}
          paths:
            - "~/.cargo/registry"
            - "~/.cargo/git"
      - save_cache:
          key: v1-cargo-binstall-{{ arch }}-v1.10.15
          paths:
            - "~/.cargo/bin/cargo-binstall"
      # Save cache for cargo-audit binary
      - save_cache:
          key: v1-cargo-binaries-audit-{{ arch }}-latest
          paths:
            - "~/.cargo/bin/cargo-audit"
      - run:
          name: Run security audit
          command: cargo audit

# ==============================================================================
# Workflow Definitions
# Orchestrates the execution of jobs, defining their order and dependencies.
# ==============================================================================
workflows:
  version: 2

  # ------------------------------------------------------------------------------
  # Workflow: Main Build and Test Pipeline
  # Triggered on every commit to any branch.
  # Optimized to reduce container spin-up overhead by combining related jobs.
  # ------------------------------------------------------------------------------
  main_pipeline:
    jobs:
      # Stage 1: Fast quality checks (format + lint in one container)
      - fast_checks

      # Stage 2: Build and test in one container (saves ~15-20s container spin-up)
      - build_and_test:
          requires:
            - fast_checks

      # Stage 3: Run additional validation jobs in parallel
      - doc:
          requires:
            - build_and_test
      - security_audit:
          requires:
            - build_and_test

      # Stage 4: Generate and upload code coverage
      - coverage:
          requires:
            - build_and_test

  # ------------------------------------------------------------------------------
  # Workflow: Nightly Security Audit
  # Runs a security audit daily at midnight UTC on production branches.
  # ------------------------------------------------------------------------------
  nightly_security:
    triggers:
      - schedule:
          # Cron syntax for daily at 00:00 UTC
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - main
                - master
    jobs:
      - security_audit
